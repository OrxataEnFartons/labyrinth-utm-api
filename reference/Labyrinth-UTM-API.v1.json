{
  "openapi": "3.0.0",
  "info": {
    "title": "Labyrinth UTM API",
    "version": "1.0",
    "contact": {
      "name": "FL-PAS",
      "url": "www.",
      "email": "someone@dlr.de"
    },
    "description": "API describing the message exchange between the drones/GCSs and the UTM system."
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/login/{operator_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "operator_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Login in the UTM system",
        "operationId": "get-login-drone_id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "user login request",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "operator_id",
            "description": "A unique operator identifier",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "pilot_name",
            "required": true,
            "description": "For accountability purposes."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "phone",
            "description": "In case there is a need to get in contact with the pilot (a long term requirement)"
          }
        ],
        "tags": [
          "request",
          "report",
          "instruction"
        ]
      }
    },
    "/flight_plan_validation": {
      "post": {
        "summary": "Validate pre-flight plan",
        "tags": [
          "request"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accepted": {
                      "type": "string",
                      "description": "here we say somehow: a) it was accepted (and no no more actions are required from the pilot side), b) it was rejected and in this case they can find an alternative plan (their plan with some modifications to make it feasible) or not (several factors can contribute to the possibility to calculate an alternative plan)"
                    },
                    "alternative": {
                      "$ref": "../models/flight_plan.v1.json"
                    },
                    "flight_plan_id": {
                      "type": "string"
                    },
                    "reason": {
                      "type": "string",
                      "description": "reason to reject"
                    }
                  },
                  "required": [
                    "accepted",
                    "flight_plan_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "406": {
            "description": "Not Acceptable"
          }
        },
        "operationId": "post-validate_flight_plan",
        "description": "The operator sends a flight plan before the take-off to be validated by the UTM system. ",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "token",
            "description": "The token returned after a successful login."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "": {
                    "$ref": "../models/flight_plan.v1.json"
                  }
                },
                "required": [
                  ""
                ]
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "text/html": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "description": "Flight plan to validate. I am considering that is the server which sets the flight plan id. "
        }
      },
      "parameters": [],
      "get": {
        "summary": "Flight plan validation",
        "operationId": "get-flight_plan_validation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Accept a flight plan alternative previously sent by the server. (In my mind it was that this get could be used also to accept the alternative offered after sending a /takeoff that is rejected)",
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "flight_plan_id",
            "required": true,
            "description": "Flight plan alternative accepted by the operator. I am not putting this in the path because I only have this value when I receive the alternative."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "token"
          }
        ],
        "tags": [
          "request"
        ]
      }
    },
    "/takeoff/{flight_plan_id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "flight_plan_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "",
        "operationId": "get-takeoff-flight_plan_id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "string",
                      "description": "In case is rejected, for the pilot to know how to build a feasible plan."
                    },
                    "alternative": {
                      "$ref": "../models/flight_plan.v1.json"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Pilot asks for permission to start to execute a filed flight plan that starts now. If any last minute changes are necessary, the pilot sends the flight plan with the requested changes. This can be accepted or an alternative sent to the pilot if possible. They start a negotiation process using the already assigned flight_plan_id.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "token",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "flight_plan_id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "flight_plan_changes": {
                    "$ref": "../models/flight_plan.v1.json"
                  }
                }
              }
            }
          },
          "description": "If changes are requested it sends the new flight plan, using the already assigned flight_plan_id."
        },
        "tags": [
          "request"
        ]
      }
    },
    "/position": {
      "post": {
        "summary": "Position report",
        "tags": [
          "report"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../models/flight_plan.v1.json"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deviation": {
                      "$ref": "../models/flight_plan.v1.json"
                    },
                    "position": {
                      "$ref": "../models/position.v1.json"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "operationId": "post-position",
        "description": "Kind of ADS-B/Remote ID. These reports are redundantly sent by the drone and the GCS. I added a query param to distinguish which one is sending the information. \nWhen the UTM needs to change the plan, leverages the reply to this report to send the change. \nIf the GCS loses the link with the drone, it keeps sending this message to the UTM without the position. Then, if the drone keeps the link with the UTM, the UTM leverages the reply to the GCS empty report to forward to it the aircraft status. ",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "token"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "source",
            "description": "If this position is sent by the GCS or the drone.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "position": {
                    "$ref": "../models/position.v1.json"
                  }
                }
              }
            }
          },
          "description": ""
        }
      }
    },
    "/logoff": {
      "get": {
        "summary": "Log off (end of flight)",
        "tags": [
          "report"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-logoff",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "token",
            "required": true
          }
        ],
        "description": "I fused the logoff as report of end of flight. "
      }
    }
  },
  "components": {
    "schemas": {}
  },
  "tags": [
    {
      "name": "request"
    },
    {
      "name": "report"
    },
    {
      "name": "instruction"
    }
  ]
}