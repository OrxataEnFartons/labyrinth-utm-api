{
  "openapi": "3.0.0",
  "info": {
    "title": "Labyrinth UTM API",
    "version": "1.0",
    "contact": {
      "name": "FL-PAS",
      "url": "www.",
      "email": "someone@dlr.de"
    },
    "description": "API describing the message exchange between the drones/GCSs and the UTM system."
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/login": {
      "parameters": [],
      "get": {
        "summary": "Login in the UTM system",
        "operationId": "get-login-drone_id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "User login request to start a UTM session for the pilot, API authentication and authorization has to be handled prior according to the global security schema and its endpoints.\n",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "operator_id",
            "description": "A unique operator identifier",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "pilot_name",
            "required": true,
            "description": "For accountability purposes."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "phone",
            "description": "In case there is a need to get in contact with the pilot (a long term requirement)"
          }
        ],
        "tags": [
          "user",
          "report"
        ]
      }
    },
    "/flight/plan": {
      "post": {
        "summary": "Validate pre-flight plan",
        "tags": [
          "request"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accepted": {
                      "type": "string",
                      "description": "here we say somehow: a) it was accepted (and no no more actions are required from the pilot side), b) it was rejected and in this case they can find an alternative plan (their plan with some modifications to make it feasible) or not (several factors can contribute to the possibility to calculate an alternative plan)"
                    },
                    "alternative": {
                      "$ref": "./models/flight_plan.v1.json"
                    },
                    "flight_plan_id": {
                      "type": "string"
                    },
                    "reason": {
                      "type": "string",
                      "description": "reason to reject"
                    }
                  },
                  "required": [
                    "accepted",
                    "flight_plan_id"
                  ]
                }
              }
            }
          }
        },
        "operationId": "post-validate_flight_plan",
        "description": "Propose a flight plan before the take-off to be validated by the UTM system. The server creates a flight plan ID to file the proposal under. If it is not accepted, an alternative will be proposed (Martin: using the same flight plan ID?) to the client, starting a negotation process.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "": {
                    "$ref": "./models/flight_plan.v1.json"
                  }
                },
                "required": [
                  ""
                ]
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "text/html": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "description": "Flight plan to validate.\n\nMiguel: I am considering that is the server which sets the flight plan id.\n\nMartin: I also think that this would be the best way, otherwise the client would need to have a reasonable way to generate valid, unique IDs."
        }
      },
      "parameters": [],
      "get": {
        "summary": "Flight plan validation",
        "operationId": "get-flight_plan_validation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "description": "Accept a flight plan alternative previously sent by the server. (Miguel: In my mind it was that this get could be used also to accept the alternative offered after sending a /takeoff that is rejected)",
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "flight_plan_id",
            "required": true
          }
        ],
        "tags": [
          "request"
        ]
      }
    },
    "/flight/takeoff": {
      "parameters": [],
      "post": {
        "summary": "",
        "operationId": "get-takeoff-flight_plan_id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "string",
                      "description": "Reason why the intended flight plan was rejected, for the pilot to know how to build a feasible plan."
                    },
                    "alternative": {
                      "$ref": "./models/flight_plan.v1.json"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Pilot asks for permission to execute a filed flight plan that starts now. If any last minute changes are necessary, the pilot sends the flight plan with the requested changes. This can be accepted or an alternative sent to the pilot if possible. They start a negotiation process using the already assigned `flight_plan_id`.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "flight_plan_id",
            "required": true,
            "description": "ID of the flight plan to execute"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "flight_plan_changes": {
                    "$ref": "./models/flight_plan.v1.json"
                  }
                }
              }
            }
          },
          "description": "If changes are requested it sends the new flight plan, using the already assigned `flight_plan_id`."
        },
        "tags": [
          "request"
        ]
      }
    },
    "/flight/position": {
      "post": {
        "summary": "Position report",
        "tags": [
          "report"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./models/flight_plan.v1.json"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deviation": {
                      "$ref": "./models/flight_plan.v1.json"
                    },
                    "position": {
                      "$ref": "./models/position.v1.json"
                    }
                  }
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "position": {
                      "$ref": "./models/position.v1.json"
                    }
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "": {
                      "type": "string"
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "application/EDI-X12": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "application/EDIFACT": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "drone_position": {
                      "$ref": "./models/position.v1.json"
                    },
                    "traffic": {
                      "type": "array",
                      "items": {
                        "$ref": "./models/position.v1.json"
                      }
                    }
                  }
                }
              },
              "application/atom+xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "drone_position": {
                      "$ref": "./models/position.v1.json"
                    },
                    "traffic": {
                      "type": "array",
                      "items": {
                        "$ref": ""
                      }
                    }
                  }
                }
              },
              "application/font-woff": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "traffic": {
                      "type": "array",
                      "items": {
                        "$ref": "./models/position.v1.json"
                      }
                    },
                    "drone_position": {
                      "$ref": "./models/position.v1.json"
                    },
                    "instructions": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "operationId": "post-position",
        "description": "Kind of ADS-B/Remote ID. These reports are redundantly sent by the drone and the GCS. I added a query param to distinguish which one is sending the information. \nI understand that the only way for the UTM to send messages to the pilot is to leverage the reply to the position reports. The, these are then the situations that will make use of that reply:\n- When the UTM needs to change the flight plan (deviations), it will include the instructions. \n- If the GCS loses the link with the drone, it keeps sending empty position reports. Then, if the drone keeps the link with the UTM, the UTM leverages the reply to the GCS to relay the position and status of the drone.\n- an array of positions of traffic nearby\n",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "token"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "source",
            "description": "If this position is sent by the GCS or the drone.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "position": {
                    "$ref": "./models/position.v1.json"
                  }
                }
              }
            }
          },
          "description": ""
        }
      },
      "parameters": []
    },
    "/logoff": {
      "get": {
        "summary": "Log off (end of flight)",
        "operationId": "get-logoff",
        "parameters": [],
        "description": "I fused the logoff as report of end of flight.\n\nMartin: should this also automatically invalidate the login tokens?",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/flight/contingency": {
      "post": {
        "summary": "Contingency report",
        "tags": [
          "report"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "operationId": "post-flight-contingency",
        "description": "When there is a contingency and the drone is still able to communicate with the UTM, it will send this report to warn about the contingency plan about to be loaded and executed. In principle, UTM should have knowledge of the details of the contingency plans before the flight, because these must appear in the flight plan, and therefore could be referenced with an id. However, during the flight the pilot could have been forced to change them, so we should accept also an intent, instead. \n\nNo idea yet about how intents can de specified or if that depends on the drone FMS. So I put a string by now and a format flag to identify the format that we will find in such string. This flag can also indicate that what appears in the string is a identifier of an intent appearing already in the flight plan. ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string"
                  },
                  "intent": {
                    "type": "string"
                  }
                },
                "required": [
                  "format",
                  "intent"
                ]
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {},
    "securitySchemes": {
      "client": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "scopes": {},
            "refreshUrl": "refresh",
            "tokenUrl": "token"
          }
        },
        "description": "Machine to machine API access"
      },
      "dev": {
        "name": "API Key",
        "type": "apiKey",
        "in": "header",
        "description": "API keys act as static, permanent access tokens - for testing and development purposes"
      }
    }
  },
  "tags": [
    {
      "name": "request"
    },
    {
      "name": "report"
    },
    {
      "name": "user"
    }
  ],
  "security": [
    {
      "dev": []
    },
    {
      "client": []
    }
  ]
}